lua_package_path "/usr/local/openresty/site/lualib/resty/?.lua;;";

server {
  listen 80;
  server_name localhost;
  keepalive_timeout 5;

  location /ext {
    root /app;
  }

  location /ext2 {
    proxy_pass http://192.168.1.4:9999;
  }

  location /hellolua {
    content_by_lua '
        ngx.header["Content-Type"] = "text/plain";
        ngx.say("hello world");
    ';
  }

  location /modify {
    resolver 8.8.8.8;
    proxy_pass http://192.168.1.4:9999;
    # proxy_pass http://mybackend;
    #content_by_lua_block {
    #  local http = require "resty.http"
    #  local httpc = http.new()
    #  local res, err = httpc:request_uri("http://google.com/", {
    #    method = "GET",
    #    keepalive_timeout = 60,
    #    keepalive_pool = 10
    #  })
#
    #  if not res then
    #    ngx.say("failed to request: ", err)
    #    return
    #  end
#
    #  --ngx.status = res.status
    #  --ngx.say(res.body)
    #}
    rewrite_by_lua_block {
      local res = ngx.location.capture("/ext2")
      if res.status == 200 then
        ngx.req.set_uri_args({ usefcp = '1' })
      end
      ngx.log(ngx.STDERR, res.status)
    }
    body_filter_by_lua_block {
      local args, err = ngx.req.get_uri_args()
      for key, val in pairs(args) do
        ngx.log(ngx.STDERR, key .. val)
      end
      ngx.arg[1] = string.upper(ngx.arg[1])
    }
  }
}
